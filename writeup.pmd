<!--
To run in terminal:
pweave -f pandoc writeup.pmd
pandoc -s --mathjax writeup.md -o writeup.html 
-->

# Analysis of Rule Changes in Subreddits

Namrata Kasaraneni

```python, echo=False
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pprint import pprint

rules_df = pd.read_csv("output_data/seth/step3_description_data.csv")
violations_df = pd.read_csv("output_data/seth/step3_violation_data.csv")
names_df = pd.read_csv("output_data/seth/step3_name_data.csv")
added_deleted_rules = pd.read_csv('output_data/seth/added_or_deleted_rules_data.csv')
rules_in_both_snaps = pd.read_csv('output_data/seth/rules_in_both_snaps_data.csv')


def generate_metadata(df):
    # returns a data frame with rows corresponding to subreddits and columns
    # corresponding to change type
    relevant_columns = df[["communityID", "change_type"]]
    piv_df = pd.pivot_table(relevant_columns, index=['communityID'], 
                columns=['change_type'], aggfunc=len, fill_value=0)
    piv_df['changed'] = piv_df.changed / 2 # double counting because when rules are changed we keep both versions
    return piv_df

def generate_change_percents(metadata):
    # return avg percent of rules for each change type
    # based on the output of generate_metadata()
    metadata = metadata.div(metadata.sum(axis=1), axis=0)
    metadata = metadata.multiply(100)
    metadata = metadata.mean()
    metadata = metadata.round(2)
    # metadata = metadata.astype(int)
    return metadata

```
## Data
All of the figures generated in this plot uses data taken from two snapshots of Reddit: 
the first was scraped in April 2020, and the second was scraped December of 2020. Subreddits 
that had fewer than three subscribers in both scrapes, zero rules in both scrapes, or that were 
founded within a month of the first scrape were filtered out. With the remaining
subs, we tracked how rules changed between the two snapshots. We identified rules that
were the same if they had the same creation timestamp and description, or the same rule 
name.There were five types of text labels:

1. **unchanged**: Rules that had fewer than 10 characters change between snapshots, or rules
    that were present at the subreddit's creation and were present in the second snapshot.
2. **added**: Rules that was added after the subreddit's creation or after the first snapshot.
3. **deleted**: Rules that were present in the first snapshot and not the second.
4. **changed**: Rules that were present at the creation of the subreddit, and then changed
    between the first and second snapshot.

Additionally, each rule had a short name (the name displayed on the subreddit's main page) and 
a violation reason (which moderators use to flag posts that violate the rules). Similar text 
analysis was done on the short names and the violation reasons of each rule.

### Description of the dataset

```python, echo = False
rules_metadata = generate_metadata(rules_df)
violations_metadata = generate_metadata(violations_df)
names_metadata = generate_metadata(names_df)

rules_per_sub = rules_metadata.sum(axis=1)
quartiles = rules_per_sub.quantile([0.25, 0.5, 0.75])
```

The datasets contain <% len(rules_df) %> subs. The subs have between <% int(rules_per_sub.min()) %>
to <% int(rules_per_sub.max()) %> rules, with the first and third quartiles being <% int(quartiles[0.25]) %>
and <% int(quartiles[0.75]) %> rules. 

## Growth in Rules Corpus

```python, echo = False, fig = True, width = 400, caption = "Figure 1"
# Get data
data = np.array(rules_df["change_type"])
labels, counts = np.unique(data, return_counts=True)
counts[1] = counts[1]/2 # changed are double counted, so divide

# Create histogram
plt.bar(labels, counts, log=True, align='center')
plt.gca().set_xticks(labels)

# Set axis labels and title
plt.xlabel("Change Type")
plt.ylabel("Frequency")
plt.title("How Rule Descriptions Changed Between Snaps")

# Display plot
plt.show()
```
**Figure 1** is a histogram that summarizes the change types of all the rules we processed between
the two snapshots. The vast majority of rules were unchanged between the snapshots. Out of the rules that
had activity, addition was by far the most frequent type of rule activity, followed by deletion.
Actual change of the rule description is the rarest type of rule activity. **Figure 1** indicates that
the overall corpus of subreddit rules is increasing over time. 

## Difference in Changes Between Text Fields


```python, echo = False
total_added = (added_deleted_rules == 'added').sum()
total_deleted = (added_deleted_rules == 'deleted').sum()
total_present = (added_deleted_rules != 'never_present').sum()
```
In **Table 1**, we can compare the number of non-default rule descriptions and violation reasons
that were present in rules that were either added or deleted between the two snapshots. Rules in Reddit 
have to be initialized with a rule name, but they can leave their violation reasons and rule descriptions
blank, or just make them the same as the rule name. For example, the first row of the table shows that 
<%  total_added['name_change_type'] %> rules were added after the first snapshot, but only 
<%  total_added['description_change_type'] %> of those rules had non-default descriptions.

### Table 1: Added and Deleted Rules 

<style>
  table {
    width: 100%;
    border-collapse: collapse;
  }
  th, td {
    text-align: center;
    padding: 8px;
    border: 1px solid #000;
  }
</style>
<table>
  <tr>
    <th>Change Type</th>
    <th>Rule Name</th>
    <th>Rule Description</th>
    <th>Violation Reason</th>
    <th>Total</th>
  </tr>
  <tr>
    <td><strong>added</strong></td>
    <td><% total_added['name_change_type'] %></td>
    <td><% total_added['description_change_type'] %></td>
    <td><% total_added['violation_change_type'] %></td>
    <td><% total_added.sum() %></td>
  </tr>
  <tr>
    <td><strong>deleted</strong></td>
    <td><% total_deleted['name_change_type'] %></td>
    <td><% total_deleted['description_change_type'] %></td>
    <td><% total_deleted['violation_change_type'] %></td>
    <td><% total_deleted.sum() %></td>
  </tr>
  <tr>
    <td><strong>total</strong></td>
    <td><% total_present['name_change_type'] %></td>
    <td><% total_present['description_change_type'] %></td>
    <td><% total_present['violation_change_type'] %></td>
    <td></td>
  </tr>
</table>


From the table, we can see that 
<% round(total_added['description_change_type'] / total_added['name_change_type'] * 100, 2) %>%
of added rules had non-default descriptions, and
<% round(total_added['violation_change_type'] / total_added['name_change_type'] * 100, 2) %>%
of them had non-default violation reasons. 
On the other hand, only
<% int(total_deleted['violation_change_type'] / total_deleted['name_change_type'] * 100) %>%
of the deleted rules had violation reasons.

```python, echo = False
total_unchanged = (rules_in_both_snaps == 'unchanged').sum()
total_added = (rules_in_both_snaps == 'added').sum()
total_deleted = (rules_in_both_snaps == 'deleted').sum()
total_changed = (rules_in_both_snaps == 'changed').sum()
total_present = (rules_in_both_snaps != 'never_present').sum()
```

**Table 2** allows us to examine how different text fields change for rules that are present 
in both snapshots. 
<% round(total_unchanged['description_change_type']/total_present['name_change_type'] * 100, 2) %>%
of these rules were initialized with non-default rule descriptions. Rule descriptions were
never deleted, but
<% round(total_added['description_change_type']/total_present['description_change_type'] * 100, 2) %>%
were added and 
<% round(total_changed['description_change_type']/total_present['description_change_type'] * 100, 2) %>%
were changed. Rule names changed the least often. Violation text saw the most churn, with
<% round(total_added['violation_change_type']/total_present['violation_change_type'] * 100, 2) %>%
 added, 
 <% round(total_deleted['violation_change_type']/total_present['violation_change_type'] * 100, 2) %>%
 deleted and 
<% round(total_changed['violation_change_type']/total_present['violation_change_type'] * 100, 2) %>%
changed.  

### Table 2: Rules That Were Present in Both Snapshots 

<table>
  <tr>
    <th>Change Type</th>
    <th>Rule Name</th>
    <th>Rule Description</th>
    <th>Violation Reason</th>
    <th>Total</th>
  </tr>
  <tr>
    <td><strong>unchanged</strong></td>
    <td><% total_unchanged['name_change_type'] %></td>
    <td><% total_unchanged['description_change_type'] %></td>
    <td><% total_unchanged['violation_change_type'] %></td>
    <td><% total_unchanged.sum() %></td>
  </tr>
  <tr>
    <td><strong>added</strong></td>
    <td><% total_added['name_change_type'] %></td>
    <td><% total_added['description_change_type'] %></td>
    <td><% total_added['violation_change_type'] %></td>
    <td><% total_added.sum() %></td>
  </tr>
  <tr>
    <td><strong>deleted</strong></td>
    <td><% total_deleted['name_change_type'] %></td>
    <td><% total_deleted['description_change_type'] %></td>
    <td><% total_deleted['violation_change_type'] %></td>
    <td><% total_deleted.sum() %></td>
  </tr>
  <tr>
    <td><strong>changed</strong></td>
    <td><% total_changed['name_change_type'] %></td>
    <td><% total_changed['description_change_type'] %></td>
    <td><% total_changed['violation_change_type'] %></td>
    <td><% total_changed.sum() %></td>
  </tr>
  <tr>
    <td><strong>total</strong></td>
    <td><% total_present['name_change_type'] %></td>
    <td><% total_present['description_change_type'] %></td>
    <td><% total_present['violation_change_type'] %></td>
    <td></td>
  </tr>
</table>



## Punctuated Equilibrium

```python, echo=False, caption = "Figure 2", fig = True, width = 400

# get histogram data
histogram_data = rules_metadata.div(rules_metadata.sum(axis=1), axis=0)
histogram_data = histogram_data.multiply(100)
histogram_data['not_unchanged'] = 100 - histogram_data['unchanged']

# Create histogram
plt.hist(histogram_data['not_unchanged'], bins=10)

# Set axis labels and title
plt.xlabel("Percent of Rules Turned Over")
plt.ylabel("Number of Subs")
plt.title("Distribution of Rule Turnover per Sub")

# Set y-axis to log scale
plt.yscale("log")

plt.show()
```

**Figure 2** shows a histogram of the percent of rule activity (by either adding, deleting, 
or changing their rules) for each sub. We can see evidence for punctuated equilibrium in the significant 
number of subs that had over 60% of their rules turned over. In total, 
<% len(histogram_data[histogram_data.not_unchanged >= 60]) %> subs changed at least 60% of their rules 
between the two snapshots. <% len(histogram_data[histogram_data.not_unchanged >= 90]) %> of those subs turned 
over 90-100% of their rules.

```python, echo=False, caption = "Figure 3", fig = True, width = 400
# get histogram data
histogram_data = rules_metadata.div(rules_metadata.sum(axis=1), axis=0)
histogram_data = histogram_data.multiply(100)

# Create histogram
plt.hist(histogram_data['changed'], bins=10)

# Set axis labels and title
plt.xlabel("Percent of Rules Changed")
plt.ylabel("Number of Subs")
plt.title("Distribution of Rule Changes per Sub")

# Set y-axis to log scale
plt.yscale("log")

plt.show()
```
**Figure 3** is a similar histogram, but only showing rules that had their descriptions changed, discounting 
rules that were added or deleted. The evidence has the caveat that subs with high percentages of rule changes 
or activity might in reality have a low count of rules, amplifying the perceived turnover. 